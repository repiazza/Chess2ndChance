///////////////////////////////////////////////////////////
//
//    Movement Block
//
//
/**
 * @constant {number} @default
 */
const MOVEMENT_CHAIN_ORIGIN = 0;
/**
 * @constant {number} @default
 */
const MOVEMENT_CHAIN_DESTINATION = 1;
/**
 * @constant {number} @default
 */

const DEFAULT_MOVEMENT_SELECTION = 1;
/**
 * @constant {number} @default
 */
const CASTLE_MOVEMENT_SELECTION = 2;
/**
 * @constant {number} @default
 */
const EN_PASSANT_MOVEMENT_SELECTION = 3;
/**
 * @constant {number} @default
 */
const PROMOTION_MOVEMENT_SELECTION = 4;

/**
 * @constant {number} @default
 */
const SHORT_CASTLE_TYPE = 0x01;
/**
 * @constant {number} @default
 */
const LONG_CASTLE_TYPE = 0x02;
/**
 * @constant {number} @default SHORT_CASTLE_TYPE | LONG_CASTLE_TYPE;
 */
const BOTH_CASTLE_TYPE = SHORT_CASTLE_TYPE | LONG_CASTLE_TYPE;

/**
 * @constant {boolean} @default false
 */
const GET_BOOLEAN_POSSIBILITY = false;
/**
 * @constant {boolean} @default false
 */
const GET_POSSIBLE_TYPES = true;

/**
 * @constant {boolean} @default false
 */
const CONSIDER_COLISION = false;
/**
 * @constant {boolean} @default false
 */
const IGNORE_COLISION = true;

/**
 * @constant {number} @default
 */
let WEST = 0;
/**
 * @constant {number} @default
 */
let EAST = 1;
/**
 * @constant {number} @default
 */
let NORTH = 2;
/**
 * @constant {number} @default
 */
let SOUTH = 3;

//                0  1  2  3
//                l  r  t  b
let NORTH_WEST = [LEFT, TOP];
let NORTH_EAST = [RIGHT, TOP];
let SOUTH_WEST = [LEFT, BOTTOM];
let SOUTH_EAST = [RIGHT, BOTTOM];

const LONG_CASTLE = [[RIGHT], [RIGHT, RIGHT], [RIGHT, RIGHT, RIGHT]];
const SHORT_CASTLE = [[LEFT], [LEFT, LEFT]];
const ALL_CASTLE = [LONG_CASTLE, SHORT_CASTLE];

const DIRECTION_VERTICAL = [TOP, BOTTOM];
const DIRECTION_HORIZONTAL = [LEFT, RIGHT];
const DIRECTION_DIAGONAL = [TOP_RIGHT, TOP_LEFT, BOTTOM_LEFT, BOTTOM_RIGHT];

const FIRST_L_QUADRANT = [
  [TOP_LEFT, TOP],
  [TOP_RIGHT, TOP],
];
const SECOND_L_QUADRANT = [
  [TOP_RIGHT, RIGHT],
  [BOTTOM_RIGHT, RIGHT],
];
const THIRD_L_QUADRANT = [
  [BOTTOM_RIGHT, BOTTOM],
  [BOTTOM_LEFT, BOTTOM],
];
const FOURTH_L_QUADRANT = [
  [BOTTOM_LEFT, LEFT],
  [TOP_LEFT, LEFT],
];

const L_ROTATE = [
  FIRST_L_QUADRANT,
  SECOND_L_QUADRANT,
  THIRD_L_QUADRANT,
  FOURTH_L_QUADRANT,
];

const SQUARE_RANGE = 1;
const DOUBLE_SQUARE_RANGE = 2;
const L_RANGE = 4;
const LINE_OF_SIGHT = 8;
const RANGE_TYPE_NONE = 0;

const MOVEMENT_TYPE_NONE = 0;
//
// Main movement notation
//
const MOVEMENT_DIRECTION_COLUMN = 0x01;
const MOVEMENT_DIRECTION_LINE = 0x02;
const MOVEMENT_DIRECTION_DIAGONAL = 0x04;
const MOVEMENT_DIRECTION_L = 0x08;
//
// Segemented movement notation
//
const SUBTYPE_DIAG_MAIN_BEGIN = 0x10;
const SUBTYPE_DIAG_MAIN_END = 0x20;
const SUBTYPE_DIAG_OPPOSITE_BEGIN = 0x40;
const SUBTYPE_DIAG_OPPOSITE_END = 0x80;

const SUBTYPE_DIAG_ALL =
  SUBTYPE_DIAG_MAIN_BEGIN |
  SUBTYPE_DIAG_MAIN_END |
  SUBTYPE_DIAG_OPPOSITE_BEGIN |
  SUBTYPE_DIAG_OPPOSITE_END;

const SUBTYPE_COLUMN_TOP = 1024;
const SUBTYPE_COLUMN_BOTTOM = 2048;
const SUBTYPE_LINE_LEFT = 4096;
const SUBTYPE_LINE_RIGHT = 8192;
//
// Special movement notation
//
const SPECIAL_MOVEMENT_CASTLE = 16384;
const SPECIAL_MOVEMENT_EN_PASSANT = 32768;
const SPECIAL_MOVEMENT_PROMOTE = 65536;
const SPECIAL_MOVEMENT_ALL =
  SPECIAL_MOVEMENT_CASTLE | SPECIAL_MOVEMENT_EN_PASSANT | SPECIAL_MOVEMENT_PROMOTE;

const MOVEMENT_CASTLE_SHORT = 1;
const MOVEMENT_CASTLE_LONG = 2;
const MOVEMENT_CASTLE_BOTH = 3;
//
// Compount movement notation
//
const MAIN_DIAGONAL = SUBTYPE_DIAG_MAIN_BEGIN | SUBTYPE_DIAG_MAIN_END;
const OPPOSITE_DIAGONAL = SUBTYPE_DIAG_OPPOSITE_BEGIN | SUBTYPE_DIAG_OPPOSITE_END;
//
// Full movement notation
//
const MOVEMENT_DIAGONAL_X = MAIN_DIAGONAL | OPPOSITE_DIAGONAL;
const MOVEMENT_DIRECTION_ALL =
  MOVEMENT_DIRECTION_COLUMN |
  MOVEMENT_DIRECTION_LINE |
  MOVEMENT_DIRECTION_DIAGONAL |
  MOVEMENT_DIRECTION_L;

const MOVEMENT_COLUMN_ALL = SUBTYPE_COLUMN_TOP | SUBTYPE_COLUMN_BOTTOM;
const MOVEMENT_LINE_ALL = SUBTYPE_LINE_LEFT | SUBTYPE_LINE_RIGHT;
const MOVEMENT_MAIN_ALL = MOVEMENT_COLUMN_ALL | MOVEMENT_LINE_ALL | SUBTYPE_DIAG_ALL;

const MOVEMENT_DIRECTION_SUBTYPE_ALL = MOVEMENT_DIRECTION_ALL | MOVEMENT_MAIN_ALL;
const MOVEMENT_TYPE_ALL =
  MOVEMENT_DIRECTION_ALL | MOVEMENT_MAIN_ALL | SPECIAL_MOVEMENT_ALL;

//
// Movement coordinates
//

const TOP_RIGHT_DIRECTION = "nesq";
const TOP_LEFT_DIRECTION = "nwsq";
const BOTTOM_RIGHT_DIRECTION = "sesq";
const BOTTOM_LEFT_DIRECTION = "swsq";
const TOP_DIRECTION = "tsq";
const LEFT_DIRECTION = "lsq";
const BOTTOM_DIRECTION = "bsq";
const RIGHT_DIRECTION = "rsq";
const LINE_DIRECTION = [LEFT_DIRECTION, RIGHT_DIRECTION];
const COLUMN_DIRECTION = [BOTTOM_DIRECTION, TOP_DIRECTION];
const MAIN_DIAGONAL_DIRECTION = [TOP_LEFT_DIRECTION, BOTTOM_RIGHT_DIRECTION];
const OPPOSITE_DIAGONAL_DIRECTION = [TOP_RIGHT_DIRECTION, BOTTOM_LEFT_DIRECTION];
const DIAGONAL_DIRECTION = [MAIN_DIAGONAL_DIRECTION, OPPOSITE_DIAGONAL_DIRECTION];
const ALL_DIRECTION = [
  TOP_RIGHT_DIRECTION,
  TOP_LEFT_DIRECTION,
  BOTTOM_RIGHT_DIRECTION,
  BOTTOM_LEFT_DIRECTION,
  TOP_DIRECTION,
  LEFT_DIRECTION,
  BOTTOM_DIRECTION,
  RIGHT_DIRECTION,
];

const CROSS_DIRECTION = LINE_DIRECTION.concat(COLUMN_DIRECTION);
const STAR_DIRECTION = CROSS_DIRECTION.concat(MAIN_DIAGONAL_DIRECTION).concat(
  OPPOSITE_DIAGONAL_DIRECTION
);

let LSquares = [];

//
//
//////////////////////////////////////////////////////////
